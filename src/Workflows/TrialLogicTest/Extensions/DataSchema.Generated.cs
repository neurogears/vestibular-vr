//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Block
    {
    
        private System.Collections.Generic.List<Trial> _trials = new System.Collections.Generic.List<Trial>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials")]
        public System.Collections.Generic.List<Trial> Trials
        {
            get
            {
                return _trials;
            }
            set
            {
                _trials = value;
            }
        }
    
        public System.IObservable<Block> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Block
                {
                    Trials = _trials
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Trial
    {
    
        private RewardProtocol _reward;
    
        private StimulusProtocol _visualStim;
    
        private double _runGainModifier = 1D;
    
        private double _runThresholdModifier = 1D;
    
        private HaltProtocol _haltProtocol;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public RewardProtocol Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="visualStim")]
        public StimulusProtocol VisualStim
        {
            get
            {
                return _visualStim;
            }
            set
            {
                _visualStim = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="runGainModifier")]
        public double RunGainModifier
        {
            get
            {
                return _runGainModifier;
            }
            set
            {
                _runGainModifier = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="runThresholdModifier")]
        public double RunThresholdModifier
        {
            get
            {
                return _runThresholdModifier;
            }
            set
            {
                _runThresholdModifier = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="haltProtocol")]
        public HaltProtocol HaltProtocol
        {
            get
            {
                return _haltProtocol;
            }
            set
            {
                _haltProtocol = value;
            }
        }
    
        public System.IObservable<Trial> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Trial
                {
                    Reward = _reward,
                    VisualStim = _visualStim,
                    RunGainModifier = _runGainModifier,
                    RunThresholdModifier = _runThresholdModifier,
                    HaltProtocol = _haltProtocol
                }));
        }
    }


    public enum StimulusProtocol
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="grating")]
        Grating = 0,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="texture")]
        Texture = 1,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cloud")]
        Cloud = 2,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardProtocol
    {
    
        private double _amountHigh = 0D;
    
        private double _amountLow = 0D;
    
        private double _delay = 0D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amountHigh")]
        public double AmountHigh
        {
            get
            {
                return _amountHigh;
            }
            set
            {
                _amountHigh = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amountLow")]
        public double AmountLow
        {
            get
            {
                return _amountLow;
            }
            set
            {
                _amountLow = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        public System.IObservable<RewardProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardProtocol
                {
                    AmountHigh = _amountHigh,
                    AmountLow = _amountLow,
                    Delay = _delay
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HaltProtocol
    {
    
        private double _haltProbability = 0.5D;
    
        private double _minumumDelay = 0.1D;
    
        private double _randomDelay = 0.5D;
    
        private double _haltTime = 2D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="haltProbability")]
        public double HaltProbability
        {
            get
            {
                return _haltProbability;
            }
            set
            {
                _haltProbability = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minumumDelay")]
        public double MinumumDelay
        {
            get
            {
                return _minumumDelay;
            }
            set
            {
                _minumumDelay = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="randomDelay")]
        public double RandomDelay
        {
            get
            {
                return _randomDelay;
            }
            set
            {
                _randomDelay = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="haltTime")]
        public double HaltTime
        {
            get
            {
                return _haltTime;
            }
            set
            {
                _haltTime = value;
            }
        }
    
        public System.IObservable<HaltProtocol> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HaltProtocol
                {
                    HaltProbability = _haltProbability,
                    MinumumDelay = _minumumDelay,
                    RandomDelay = _randomDelay,
                    HaltTime = _haltTime
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VestibularVrSession
    {
    
        private Metadata _metadata;
    
        private System.Collections.Generic.List<Block> _blocks = new System.Collections.Generic.List<Block>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="blocks")]
        public System.Collections.Generic.List<Block> Blocks
        {
            get
            {
                return _blocks;
            }
            set
            {
                _blocks = value;
            }
        }
    
        public System.IObservable<VestibularVrSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VestibularVrSession
                {
                    Metadata = _metadata,
                    Blocks = _blocks
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _rootPath = "";
    
        private double _runGain = 1D;
    
        private double _runThreshold = 1D;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="runGain")]
        public double RunGain
        {
            get
            {
                return _runGain;
            }
            set
            {
                _runGain = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="runThreshold")]
        public double RunThreshold
        {
            get
            {
                return _runThreshold;
            }
            set
            {
                _runThreshold = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    AnimalId = _animalId,
                    RootPath = _rootPath,
                    RunGain = _runGain,
                    RunThreshold = _runThreshold
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardProtocol> source)
        {
            return Process<RewardProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HaltProtocol> source)
        {
            return Process<HaltProtocol>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VestibularVrSession> source)
        {
            return Process<VestibularVrSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HaltProtocol>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VestibularVrSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<VestibularVrSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}