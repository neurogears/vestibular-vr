//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace ArenaSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _valX = 0D;
    
        private double _valY = 0D;
    
        private double _valZ = 0D;
    
        public Vector3()
        {
        }
    
        protected Vector3(Vector3 other)
        {
            _valX = other._valX;
            _valY = other._valY;
            _valZ = other._valZ;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valX")]
        public double ValX
        {
            get
            {
                return _valX;
            }
            set
            {
                _valX = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valY")]
        public double ValY
        {
            get
            {
                return _valY;
            }
            set
            {
                _valY = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valZ")]
        public double ValZ
        {
            get
            {
                return _valZ;
            }
            set
            {
                _valZ = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Vector3(this)));
        }
    
        public System.IObservable<Vector3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Vector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("valX = " + _valX + ", ");
            stringBuilder.Append("valY = " + _valY + ", ");
            stringBuilder.Append("valZ = " + _valZ);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ObjectDefinition
    {
    
        private string _meshName;
    
        private Vector3 _position;
    
        private Vector3 _rotation;
    
        private Vector3 _scale;
    
        private Vector3 _color;
    
        public ObjectDefinition()
        {
        }
    
        protected ObjectDefinition(ObjectDefinition other)
        {
            _meshName = other._meshName;
            _position = other._position;
            _rotation = other._rotation;
            _scale = other._scale;
            _color = other._color;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="meshName")]
        public string MeshName
        {
            get
            {
                return _meshName;
            }
            set
            {
                _meshName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="position")]
        public Vector3 Position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation")]
        public Vector3 Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        public Vector3 Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="color")]
        public Vector3 Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
    
        public System.IObservable<ObjectDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ObjectDefinition(this)));
        }
    
        public System.IObservable<ObjectDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ObjectDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("meshName = " + _meshName + ", ");
            stringBuilder.Append("position = " + _position + ", ");
            stringBuilder.Append("rotation = " + _rotation + ", ");
            stringBuilder.Append("scale = " + _scale + ", ");
            stringBuilder.Append("color = " + _color);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VestibularVrArenaSession
    {
    
        private Metadata _metadata;
    
        private MotorSettings _motorSettings;
    
        private CameraSettings _cameraSettings;
    
        private System.Collections.Generic.List<ObjectDefinition> _objectDefinitions = new System.Collections.Generic.List<ObjectDefinition>();
    
        public VestibularVrArenaSession()
        {
        }
    
        protected VestibularVrArenaSession(VestibularVrArenaSession other)
        {
            _metadata = other._metadata;
            _motorSettings = other._motorSettings;
            _cameraSettings = other._cameraSettings;
            _objectDefinitions = other._objectDefinitions;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="motorSettings")]
        public MotorSettings MotorSettings
        {
            get
            {
                return _motorSettings;
            }
            set
            {
                _motorSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraSettings")]
        public CameraSettings CameraSettings
        {
            get
            {
                return _cameraSettings;
            }
            set
            {
                _cameraSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="objectDefinitions")]
        public System.Collections.Generic.List<ObjectDefinition> ObjectDefinitions
        {
            get
            {
                return _objectDefinitions;
            }
            set
            {
                _objectDefinitions = value;
            }
        }
    
        public System.IObservable<VestibularVrArenaSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VestibularVrArenaSession(this)));
        }
    
        public System.IObservable<VestibularVrArenaSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VestibularVrArenaSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("motorSettings = " + _motorSettings + ", ");
            stringBuilder.Append("cameraSettings = " + _cameraSettings + ", ");
            stringBuilder.Append("objectDefinitions = " + _objectDefinitions);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _rootPath = "";
    
        private double _flowToMotorGain = 1D;
    
        private double _flowToVisualTranslation = 1D;
    
        private double _flowToVisualRotation = 1D;
    
        private double _runGain = 1D;
    
        private double _arenaSize = 40D;
    
        private object _objectPlacements;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _animalId = other._animalId;
            _rootPath = other._rootPath;
            _flowToMotorGain = other._flowToMotorGain;
            _flowToVisualTranslation = other._flowToVisualTranslation;
            _flowToVisualRotation = other._flowToVisualRotation;
            _runGain = other._runGain;
            _arenaSize = other._arenaSize;
            _objectPlacements = other._objectPlacements;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Gain applied between flow sensor and motor rotation.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowToMotorGain")]
        [System.ComponentModel.DescriptionAttribute("Gain applied between flow sensor and motor rotation.")]
        public double FlowToMotorGain
        {
            get
            {
                return _flowToMotorGain;
            }
            set
            {
                _flowToMotorGain = value;
            }
        }
    
        /// <summary>
        /// Gain applied between flow sensor and visual translation.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowToVisualTranslation")]
        [System.ComponentModel.DescriptionAttribute("Gain applied between flow sensor and visual translation.")]
        public double FlowToVisualTranslation
        {
            get
            {
                return _flowToVisualTranslation;
            }
            set
            {
                _flowToVisualTranslation = value;
            }
        }
    
        /// <summary>
        /// Gain applied between flow sensor and visual translation.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowToVisualRotation")]
        [System.ComponentModel.DescriptionAttribute("Gain applied between flow sensor and visual translation.")]
        public double FlowToVisualRotation
        {
            get
            {
                return _flowToVisualRotation;
            }
            set
            {
                _flowToVisualRotation = value;
            }
        }
    
        /// <summary>
        /// Coefficient applied to movement delta (e.g. from flow sensor) to calculate running speed in visual environment.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="runGain")]
        [System.ComponentModel.DescriptionAttribute("Coefficient applied to movement delta (e.g. from flow sensor) to calculate runnin" +
            "g speed in visual environment.")]
        public double RunGain
        {
            get
            {
                return _runGain;
            }
            set
            {
                _runGain = value;
            }
        }
    
        /// <summary>
        /// Size of arena square
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arenaSize")]
        [System.ComponentModel.DescriptionAttribute("Size of arena square")]
        public double ArenaSize
        {
            get
            {
                return _arenaSize;
            }
            set
            {
                _arenaSize = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="objectPlacements")]
        public object ObjectPlacements
        {
            get
            {
                return _objectPlacements;
            }
            set
            {
                _objectPlacements = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalId = " + _animalId + ", ");
            stringBuilder.Append("rootPath = " + _rootPath + ", ");
            stringBuilder.Append("flowToMotorGain = " + _flowToMotorGain + ", ");
            stringBuilder.Append("flowToVisualTranslation = " + _flowToVisualTranslation + ", ");
            stringBuilder.Append("flowToVisualRotation = " + _flowToVisualRotation + ", ");
            stringBuilder.Append("runGain = " + _runGain + ", ");
            stringBuilder.Append("arenaSize = " + _arenaSize + ", ");
            stringBuilder.Append("objectPlacements = " + _objectPlacements);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MotorSettings
    {
    
        private int _nominalPulseInterval = 200;
    
        private int _initialPulseInterval = 200;
    
        private int _pulseStepInterval = 2;
    
        private int _pulsePeriod = 10;
    
        public MotorSettings()
        {
        }
    
        protected MotorSettings(MotorSettings other)
        {
            _nominalPulseInterval = other._nominalPulseInterval;
            _initialPulseInterval = other._initialPulseInterval;
            _pulseStepInterval = other._pulseStepInterval;
            _pulsePeriod = other._pulsePeriod;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nominalPulseInterval")]
        public int NominalPulseInterval
        {
            get
            {
                return _nominalPulseInterval;
            }
            set
            {
                _nominalPulseInterval = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialPulseInterval")]
        public int InitialPulseInterval
        {
            get
            {
                return _initialPulseInterval;
            }
            set
            {
                _initialPulseInterval = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulseStepInterval")]
        public int PulseStepInterval
        {
            get
            {
                return _pulseStepInterval;
            }
            set
            {
                _pulseStepInterval = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulsePeriod")]
        public int PulsePeriod
        {
            get
            {
                return _pulsePeriod;
            }
            set
            {
                _pulsePeriod = value;
            }
        }
    
        public System.IObservable<MotorSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MotorSettings(this)));
        }
    
        public System.IObservable<MotorSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MotorSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("nominalPulseInterval = " + _nominalPulseInterval + ", ");
            stringBuilder.Append("initialPulseInterval = " + _initialPulseInterval + ", ");
            stringBuilder.Append("pulseStepInterval = " + _pulseStepInterval + ", ");
            stringBuilder.Append("pulsePeriod = " + _pulsePeriod);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraSettings
    {
    
        private double _cameraFrequency1 = 100D;
    
        private double _cameraFrequency2 = 100D;
    
        private int _cameraExposure1 = 5000;
    
        private int _cameraExposure2 = 5000;
    
        private double _cameraGain1 = 1D;
    
        private double _cameraGain2 = 1D;
    
        public CameraSettings()
        {
        }
    
        protected CameraSettings(CameraSettings other)
        {
            _cameraFrequency1 = other._cameraFrequency1;
            _cameraFrequency2 = other._cameraFrequency2;
            _cameraExposure1 = other._cameraExposure1;
            _cameraExposure2 = other._cameraExposure2;
            _cameraGain1 = other._cameraGain1;
            _cameraGain2 = other._cameraGain2;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraFrequency1")]
        public double CameraFrequency1
        {
            get
            {
                return _cameraFrequency1;
            }
            set
            {
                _cameraFrequency1 = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraFrequency2")]
        public double CameraFrequency2
        {
            get
            {
                return _cameraFrequency2;
            }
            set
            {
                _cameraFrequency2 = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraExposure1")]
        public int CameraExposure1
        {
            get
            {
                return _cameraExposure1;
            }
            set
            {
                _cameraExposure1 = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraExposure2")]
        public int CameraExposure2
        {
            get
            {
                return _cameraExposure2;
            }
            set
            {
                _cameraExposure2 = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraGain1")]
        public double CameraGain1
        {
            get
            {
                return _cameraGain1;
            }
            set
            {
                _cameraGain1 = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraGain2")]
        public double CameraGain2
        {
            get
            {
                return _cameraGain2;
            }
            set
            {
                _cameraGain2 = value;
            }
        }
    
        public System.IObservable<CameraSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraSettings(this)));
        }
    
        public System.IObservable<CameraSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("cameraFrequency1 = " + _cameraFrequency1 + ", ");
            stringBuilder.Append("cameraFrequency2 = " + _cameraFrequency2 + ", ");
            stringBuilder.Append("cameraExposure1 = " + _cameraExposure1 + ", ");
            stringBuilder.Append("cameraExposure2 = " + _cameraExposure2 + ", ");
            stringBuilder.Append("cameraGain1 = " + _cameraGain1 + ", ");
            stringBuilder.Append("cameraGain2 = " + _cameraGain2);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ObjectDefinition> source)
        {
            return Process<ObjectDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VestibularVrArenaSession> source)
        {
            return Process<VestibularVrArenaSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MotorSettings> source)
        {
            return Process<MotorSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraSettings> source)
        {
            return Process<CameraSettings>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ObjectDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VestibularVrArenaSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MotorSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraSettings>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<VestibularVrArenaSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}